{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getUser","idUser","fetch","then","response","json","TodoList","state","currentInput","statusTodo","todos","handleInput","event","setState","target","value","changeStatus","sortTodos","copyTodos","lowerCaseCurrentInput","toLowerCase","filter","completed","title","includes","loadTodosFromServer","a","todosFromServer","setUserId","this","props","className","type","onChange","map","todo","classNames","htmlFor","readOnly","onClick","userId","id","React","Component","CurrentUser","user","updateUser","selectedUserId","clear","prevProps","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"0WAQO,SAASA,EAAQC,GACtB,OAAOC,MARS,2CAQSD,GACtBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,WCKlBC,EAAb,4MACEC,MAAc,CACZC,aAAc,GACdC,WAAY,GACZC,MAAO,IAJX,EAmBEC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZL,aAAcI,EAAME,OAAOC,SArBjC,EAyBEC,aAAe,SAACJ,GACd,EAAKC,SAAS,CACZJ,WAAYG,EAAME,OAAOC,SA3B/B,EA+BEE,UAAY,WACV,IACIC,EADJ,EAA4C,EAAKX,MAAzCG,EAAR,EAAQA,MAAOF,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,WAGvBU,EAAwBX,EAAaY,cAE3C,OAAQX,GACN,IAAK,SACHS,EAAYR,EAAMW,QAAO,SAACN,GAAD,OAAaA,EAAMO,aAC5C,MACF,IAAK,YACHJ,EAAYR,EAAMW,QAAO,SAACN,GAAD,OAAYA,EAAMO,aAC3C,MACF,QACEJ,EAAYR,EAIhB,OAAOQ,EAAUG,QAAO,SAACN,GACvB,QAAIA,EAAMQ,MAAMH,cAAcI,SAASL,OAlD7C,uDAOE,WAAqB,IAAD,OACZM,EAAmB,uCAAG,4BAAAC,EAAA,sEDnBvBxB,MAJS,2CAKbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCkBC,OACpBsB,EADoB,OAG1B,EAAKd,SAAS,CACZH,MAAOiB,IAJiB,2CAAH,qDAQzBF,MAhBJ,oBA0DE,WACE,IAAQG,EAAcC,KAAKC,MAAnBF,UACFlB,EAAQmB,KAAKZ,YAEnB,OACE,sBAAKc,UAAU,WAAf,UACE,wCACA,uBACEC,KAAK,OACLjB,MAAOc,KAAKtB,MAAMC,aAClByB,SAAUJ,KAAKlB,cAEjB,yBACEI,MAAOc,KAAKtB,MAAME,WAClBwB,SAAUJ,KAAKb,aAFjB,UAIE,wBAAQD,MAAM,GAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,2BAGF,qBAAKgB,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGrB,EAAMwB,KAAI,SAACC,GAAD,OACT,qBAEEJ,UAAWK,IACT,iBACA,CAAE,6BAA8BD,EAAKb,WACrC,CAAE,0BAA2Ba,EAAKb,YALtC,UAQE,wBAAOe,QAAQ,YAAf,UACE,uBAAOL,KAAK,WAAWM,UAAQ,IAC/B,4BAAIH,EAAKZ,WAGX,wBACEQ,UAAU,+DACVC,KAAK,SACLO,QAAS,kBAAMX,EAAUO,EAAKK,SAHhC,yBAKaL,EAAKK,YAjBbL,EAAKM,kBAnF1B,GAA8BC,IAAMC,WCFvBC,G,MAAb,4MACErC,MAAe,CACbsC,KAAM,MAFV,EAeEC,WAfF,sBAee,4BAAApB,EAAA,+EAEgB1B,EAAQ,EAAK8B,MAAMiB,gBAFnC,OAEHF,EAFG,OAIT,EAAKhC,SAAS,CACZgC,SALO,gDAQT,EAAKhC,SAAS,CACZgC,KAAM,OATC,yDAff,EA6BEG,MAAQ,WACN,EAAKlB,MAAMF,UAAU,IA9BzB,uDAKE,WACEC,KAAKiB,eANT,gCASE,SAAmBG,GACbpB,KAAKC,MAAMiB,iBAAmBE,EAAUF,gBAC1ClB,KAAKiB,eAXX,oBAiCE,WACE,IAAQD,EAAShB,KAAKtB,MAAdsC,KAER,OAAKA,EAOH,sBAAKd,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,+DAAyBc,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMJ,QAClE,oBAAIV,UAAU,oBAAd,gBAAmCc,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMK,OACzC,mBAAGnB,UAAU,qBAAb,gBAAmCc,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMM,QACzC,mBAAGpB,UAAU,qBAAb,gBAAmCc,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMO,QACzC,wBACEpB,KAAK,SACLD,UAAU,4BACVQ,QAASV,KAAKmB,MAHhB,sBAVA,wDAtCR,GAAiCN,IAAMC,YCHjCU,E,4MACJ9C,MAAe,CACbwC,eAAgB,G,EAGlBnB,UAAY,SAACY,GACX,EAAK3B,SAAS,CACZkC,eAAgBP,K,4CAIpB,WACE,IAAQO,EAAmBlB,KAAKtB,MAAxBwC,eAER,OACE,sBAAKhB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,UAAWC,KAAKD,cAIpB,qBAAKG,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGgB,EACC,cAAC,EAAD,CACEA,eAAgBlB,KAAKtB,MAAMwC,eAC3BnB,UAAWC,KAAKD,YAEhB,8B,GA7BEc,IAAMC,WAqCTU,IC5CfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f361b18e.chunk.js","sourcesContent":["const URL_TODOS = 'https://mate.academy/students-api/todos';\nconst URL_USERS = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(URL_TODOS)\n    .then(response => response.json());\n}\n\nexport function getUser(idUser: number): Promise<User> {\n  return fetch(URL_USERS + idUser)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api';\n\ntype Props = {\n  setUserId: (userId: number) => void,\n};\n\ntype State = {\n  currentInput: string,\n  statusTodo: string,\n  todos: Todo[],\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state:State = {\n    currentInput: '',\n    statusTodo: '',\n    todos: [],\n  };\n\n  componentDidMount() {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      this.setState({\n        todos: todosFromServer,\n      });\n    };\n\n    loadTodosFromServer();\n  }\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      currentInput: event.target.value,\n    });\n  };\n\n  changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      statusTodo: event.target.value,\n    });\n  };\n\n  sortTodos = () => {\n    const { todos, currentInput, statusTodo } = this.state;\n    let copyTodos;\n\n    const lowerCaseCurrentInput = currentInput.toLowerCase();\n\n    switch (statusTodo) {\n      case 'active':\n        copyTodos = todos.filter((value) => (!value.completed));\n        break;\n      case 'completed':\n        copyTodos = todos.filter((value) => (value.completed));\n        break;\n      default:\n        copyTodos = todos;\n        break;\n    }\n\n    return copyTodos.filter((value) => {\n      if (value.title.toLowerCase().includes(lowerCaseCurrentInput)) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  render() {\n    const { setUserId } = this.props;\n    const todos = this.sortTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          value={this.state.currentInput}\n          onChange={this.handleInput}\n        />\n        <select\n          value={this.state.statusTodo}\n          onChange={this.changeStatus}\n        >\n          <option value=\"\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label htmlFor=\"checkTodo\">\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button TodoList__user-button--selected button\"\n                  type=\"button\"\n                  onClick={() => setUserId(todo.userId)}\n                >\n                  { `User #${todo.userId}` }\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  setUserId: (userId: number) => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.updateUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUserId !== prevProps.selectedUserId) {\n      this.updateUser();\n    }\n  }\n\n  updateUser = async () => {\n    try {\n      const user: User = await getUser(this.props.selectedUserId);\n\n      this.setState({\n        user,\n      });\n    } catch (e) {\n      this.setState({\n        user: null,\n      });\n    }\n  };\n\n  clear = () => {\n    this.props.setUserId(0);\n  };\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <p>No user was founded</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={this.clear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  setUserId = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            setUserId={this.setUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={this.state.selectedUserId}\n                setUserId={this.setUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}