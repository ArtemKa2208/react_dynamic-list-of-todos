{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","currentInput","statusTodo","handleInput","event","setState","target","value","changeStatus","sortTodos","todos","props","copyTodos","lowerCaseCurrentInput","toLowerCase","filter","completed","title","includes","setUserId","this","className","type","onChange","map","todo","classNames","htmlFor","readOnly","onClick","userId","React","Component","getUser","idUser","fetch","then","response","json","CurrentUser","user","updateUser","a","selectedUserId","clear","prevProps","id","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3163b1e7.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  setUserId: (userId: number) => void,\n};\n\ntype State = {\n  currentInput: string,\n  statusTodo: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state:State = {\n    currentInput: '',\n    statusTodo: '',\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      currentInput: event.target.value,\n    });\n  };\n\n  changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      statusTodo: event.target.value,\n    });\n  };\n\n  sortTodos = () => {\n    const { currentInput, statusTodo } = this.state;\n    const { todos } = this.props;\n    let copyTodos = [...todos];\n\n    const lowerCaseCurrentInput = currentInput.toLowerCase();\n\n    switch (statusTodo) {\n      case 'active':\n        copyTodos = todos.filter((value) => (!value.completed));\n        break;\n      case 'completed':\n        copyTodos = todos.filter((value) => (value.completed));\n        break;\n      default:\n        break;\n    }\n\n    return copyTodos.filter((value) => {\n      if (value.title.toLowerCase().includes(lowerCaseCurrentInput)) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  render() {\n    const { setUserId } = this.props;\n    const todos = this.sortTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          value={this.state.currentInput}\n          onChange={this.handleInput}\n        />\n        <select\n          value={this.state.statusTodo}\n          onChange={this.changeStatus}\n        >\n          <option value=\"\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map((todo) => (\n              <li className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              >\n                <label htmlFor=\"checkTodo\">\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button TodoList__user-button--selected button\"\n                  type=\"button\"\n                  onClick={() => setUserId(todo.userId)}\n                >\n                  { `User #${todo.userId}` }\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const URL_TODOS = 'https://mate.academy/students-api/todos';\nconst URL_USERS = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(URL_TODOS)\n    .then(response => response.json());\n}\n\nexport function getUser(idUser: number): Promise<User> {\n  return fetch(URL_USERS + idUser)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  setUserId: (userId: number) => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.updateUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUserId === prevProps.selectedUserId) {\n      return;\n    }\n\n    this.updateUser();\n  }\n\n  updateUser = async () => {\n    try {\n      const user: User = await getUser(this.props.selectedUserId);\n\n      this.setState({\n        user,\n      });\n    } catch (e) {\n      this.setState({\n        user: null,\n      });\n    }\n  };\n\n  clear = () => {\n    this.props.setUserId(0);\n  };\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <p>No user was founded</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={this.clear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  setUserId = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            setUserId={this.setUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={this.state.selectedUserId}\n                setUserId={this.setUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}